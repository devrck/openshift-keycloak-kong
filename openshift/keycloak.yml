---
kind: Template
apiVersion: v1
metadata:
  name: keycloak
  annotations:
    iconClass: icon-sso
    tags: keycloak
    openshift.io/display-name: Keycloak
    description: Keycloak Server Template
parameters:
  - displayName: Application Name
    description: The name for the application.
    name: APPLICATION_NAME
    value: keycloak
    required: true

  - displayName: Keycloak Administrator Username
    description: Keycloak Server administrator username
    name: KEYCLOAK_USER
    value: admin
    required: true

  - displayName: Keycloak Administrator Password
    description: Keycloak Server administrator password
    name: KEYCLOAK_PASSWORD
    from: "[a-zA-Z0-9]{12}"
    generate: expression
    required: true

  - displayName: Datenbank Adresse
    description: Username for PostgreSQL database
    name: DB_HOST
    required: true

  - displayName: Datenbank Name
    description: Username for PostgreSQL database
    name: DB_NAME
    required: true

  - displayName: Datenbank Username
    description: Username for PostgreSQL database
    name: DB_USER
    required: true

  - displayName: Datenbank Password
    description: Password for PostgreSQL database user
    name: DB_PASSWORD
    required: true

objects:

- kind: Secret
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  stringData:
    admin-username: "${KEYCLOAK_USER}"
    admin-password: "${KEYCLOAK_PASSWORD}"
    database-user: "${DB_USER}"
    database-password: "${DB_PASSWORD}"

- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      app: "${APPLICATION_NAME}"
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"


- kind: Route
  apiVersion: v1
  id: "${APPLICATION_NAME}-http"
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    to:
      kind: Service
      name: "${APPLICATION_NAME}"


- kind: Route
  apiVersion: v1
  id: "${APPLICATION_NAME}-https"
  metadata:
    name: "${APPLICATION_NAME}-https"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}
    tls:
      termination: edge


- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
    template:
      metadata:
        name: "${APPLICATION_NAME}"
        labels:
          app: "${APPLICATION_NAME}"
      spec:
#        securityContext:
#          runAsUser: 1000
#          fsGroup: 1000
        containers:
        - name: "${APPLICATION_NAME}"
          image: jboss/keycloak:5.0.0
          ports:
          - containerPort: 8080
            protocol: TCP
            name: http
          - name: https
            containerPort: 8443
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/auth/realms/master/.well-known/openid-configuration"
              port: 8080
            initialDelaySeconds: 10
            periodsSeconds: 15
            timeoutSeconds: 3
            failureThreashold: 5
            successThreshold: 1
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 20
            periodsSeconds: 10
            timeoutSeconds: 3
            failureThreashold: 6
            successThreshold: 1
          env:
          - name: KEYCLOAK_USER
            valueFrom:
              secretKeyRef:
                name: "${APPLICATION_NAME}"
                key: admin-username
          - name: KEYCLOAK_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${APPLICATION_NAME}"
                key: admin-password
          - name: PROXY_ADDRESS_FORWARDING
            value: "true"
          - name: DB_VENDOR
            value: "MARIADB"
          - name: DB_ADDR
            value: "${DB_HOST}"
          - name: DB_DATABASE
            value: "${DB_NAME}"
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: "${APPLICATION_NAME}"
                key: database-user
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${APPLICATION_NAME}"
                key: database-password
          securityContext:
            privileged: false
